class Tablas {
  static int calcularPercentil({
    required Tabla tabla,
    required int edad,
    required int numPalabras,
  }) {
    //Encontrar columna mas cercana a edad
    final columna = tabla.getColumnaPorEdad(edad);

    //Buscar numero de palabras en columna
    int index = columna.datosColumna.indexOf(numPalabras);

    //Si se encuentra un resultado exacto, regresar percentil
    if (index != -1) return tabla.rangoPercentiles[index];

    //Si no, interpolar percentiles
    final ({int index, int interpolacion}) record = columna.interpolar(numPalabras);
    if (record.index == -1) return record.interpolacion;
    return tabla.rangoPercentiles[record.index] + record.interpolacion;
  }

  static Tabla comprensionPrimerasFrasesCDI1 = Tabla(
    [99, 95, 90, 85, 80, 75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5],
    [
      Columna(8, [27, 25, 22, 18, 15, 14, 13, 12, 12, 11, 10, 9, 9, 8, 7, 6, 5, 5, 4, 2]),
      Columna(9, [27, 26, 23, 20, 18, 16, 15, 14, 14, 13, 12, 11, 10, 10, 9, 8, 6, 6, 4, 3]),
      Columna(10, [27, 26, 24, 22, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 11, 9, 8, 7, 5, 4]),
      Columna(11, [27, 27, 25, 24, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 8, 7, 5]),
      Columna(12, [28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 11, 10, 8, 6]),
      Columna(13, [28, 27, 27, 26, 25, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 13, 11, 10, 7]),
      Columna(14, [28, 28, 27, 27, 26, 26, 25, 24, 23, 23, 22, 21, 20, 18, 18, 17, 15, 13, 11, 9]),
      Columna(15, [28, 28, 28, 27, 27, 27, 26, 26, 24, 24, 23, 23, 21, 20, 19, 18, 17, 15, 13, 10]),
      Columna(16, [28, 28, 28, 28, 28, 27, 27, 27, 25, 25, 24, 24, 23, 22, 21, 20, 19, 17, 15, 12]),
      Columna(17, [28, 28, 28, 28, 28, 28, 28, 28, 26, 26, 25, 25, 24, 23, 22, 22, 21, 19, 17, 14]),
      Columna(18, [28, 28, 28, 28, 28, 28, 28, 28, 27, 27, 26, 26, 25, 24, 24, 23, 22, 20, 19, 16]),
    ],
  );

  static Tabla comprensionPalabrasCDI1 = Tabla(
    [99, 95, 90, 85, 80, 75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5],
    [
      Columna(8, [170, 145, 127, 109, 91, 81, 73, 61, 50, 41, 36, 30, 25, 20, 15, 12, 10, 7, 4, 1]),
      Columna(9, [227, 175, 150, 128, 108, 96, 87, 73, 61, 51, 45, 38, 32, 26, 20, 16, 13, 9, 6, 1]),
      Columna(10, [282, 206, 174, 149, 127, 113, 101, 87, 74, 63, 56, 48, 41, 34, 26, 22, 18, 13, 8, 2]),
      Columna(11, [329, 237, 199, 171, 148, 132, 118, 103, 90, 78, 70, 60, 52, 44, 35, 29, 23, 17, 11, 4]),
      Columna(12, [364, 268, 225, 194, 171, 153, 136, 121, 107, 96, 86, 76, 66, 56, 46, 38, 31, 24, 16, 5]),
      Columna(13, [388, 296, 250, 218, 194, 174, 155, 141, 127, 115, 105, 93, 83, 72, 59, 49, 41, 32, 22, 9]),
      Columna(14, [404, 322, 275, 242, 218, 197, 175, 162, 148, 138, 126, 114, 102, 90, 76, 64, 54, 43, 31, 13]),
      Columna(15, [414, 344, 298, 265, 242, 220, 197, 185, 171, 162, 149, 138, 125, 112, 96, 82, 70, 57, 43, 20]),
      Columna(16, [420, 362, 318, 287, 265, 243, 218, 208, 195, 188, 175, 163, 151, 137, 120, 103, 90, 75, 59, 31]),
      Columna(17, [424, 377, 337, 308, 287, 265, 240, 231, 220, 215, 201, 191, 178, 165, 147, 128, 114, 97, 79, 47]),
      Columna(18, [426, 389, 353, 326, 307, 286, 261, 254, 245, 242, 228, 219, 207, 195, 177, 157, 141, 123, 104, 69]),
    ],
  );

  static Tabla produccionPalabrasCDI1 = Tabla(
    [99, 95, 90, 85, 80, 75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5],
    [
      Columna(8, [30, 14, 7, 5, 5, 4, 3, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
      Columna(9, [42, 20, 10, 8, 6, 5, 4, 3, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
      Columna(10, [59, 27, 15, 11, 9, 7, 5, 4, 3, 3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0]),
      Columna(11, [80, 38, 21, 15, 12, 9, 7, 6, 5, 4, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0]),
      Columna(12, [106, 51, 29, 21, 16, 12, 10, 8, 6, 6, 2, 2, 1, 1, 0, 0, 0, 0, 0, 0]),
      Columna(13, [138, 69, 41, 28, 22, 16, 13, 10, 9, 8, 4, 3, 2, 2, 1, 0, 0, 0, 0, 0]),
      Columna(14, [175, 91, 56, 39, 29, 21, 18, 14, 12, 10, 7, 6, 4, 3, 1, 1, 1, 0, 0, 0]),
      Columna(15, [214, 118, 77, 53, 39, 28, 24, 19, 16, 14, 11, 10, 8, 6, 3, 3, 2, 1, 0, 0]),
      Columna(16, [253, 150, 102, 70, 52, 37, 32, 25, 21, 19, 19, 16, 15, 12, 8, 6, 5, 2, 0, 0]),
      Columna(17, [289, 185, 132, 93, 68, 48, 42, 40, 39, 33, 31, 30, 27, 24, 20, 15, 11, 5, 1, 0]),
      Columna(18, [321, 222, 167, 120, 89, 62, 56, 55, 54, 53, 51, 44, 43, 41, 40, 33, 24, 11, 2, 0]),
    ],
  );

  static Tabla totalGestosCDI1 = Tabla(
    [99, 95, 90, 85, 80, 75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5],
    [
      Columna(8, [37, 31, 25, 24, 22, 20, 18, 16, 15, 14, 13, 12, 11, 11, 9, 8, 7, 6, 5, 2]),
      Columna(9, [43, 35, 29, 27, 25, 23, 21, 19, 18, 16, 15, 14, 14, 13, 11, 10, 9, 8, 6, 3]),
      Columna(10, [47, 39, 33, 31, 29, 27, 24, 23, 21, 20, 18, 17, 16, 15, 14, 12, 11, 9, 7, 4]),
      Columna(11, [51, 43, 38, 36, 33, 31, 28, 26, 24, 23, 22, 20, 19, 18, 16, 15, 13, 12, 9, 5]),
      Columna(12, [55, 47, 42, 39, 37, 34, 32, 30, 28, 27, 25, 24, 23, 21, 19, 18, 16, 14, 11, 7]),
      Columna(13, [57, 50, 46, 43, 40, 38, 36, 34, 32, 30, 29, 28, 26, 25, 23, 21, 19, 17, 14, 10]),
      Columna(14, [59, 53, 49, 46, 44, 42, 40, 38, 36, 34, 33, 31, 30, 28, 27, 24, 22, 21, 17, 13]),
      Columna(15, [61, 55, 52, 49, 47, 45, 44, 41, 40, 38, 37, 35, 34, 32, 30, 28, 26, 24, 21, 17]),
      Columna(16, [62, 57, 55, 52, 50, 48, 47, 45, 43, 42, 40, 39, 37, 36, 34, 32, 30, 28, 25, 22]),
      Columna(17, [63, 59, 57, 54, 53, 51, 50, 48, 47, 45, 44, 43, 41, 39, 38, 36, 34, 32, 29, 27]),
      Columna(18, [64, 60, 59, 56, 55, 53, 52, 51, 50, 48, 47, 46, 44, 43, 42, 39, 38, 36, 33, 32]),
    ],
  );

  static Tabla gestosTempranosCDI1 = Tabla(
    [99, 95, 90, 85, 80, 75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5],
    [
      Columna(8, [19, 17, 13, 13, 12, 12, 11, 11, 10, 10, 10, 9, 8, 8, 7, 7, 6, 5, 4, 2]),
      Columna(9, [19, 17, 15, 14, 13, 13, 12, 12, 11, 11, 11, 10, 9, 9, 8, 8, 7, 6, 5, 3]),
      Columna(10, [20, 18, 16, 15, 15, 14, 13, 13, 12, 12, 12, 11, 10, 10, 9, 9, 8, 7, 6, 4]),
      Columna(11, [20, 19, 17, 16, 15, 15, 14, 14, 13, 13, 12, 12, 11, 11, 10, 9, 9, 8, 7, 4]),
      Columna(12, [20, 19, 18, 17, 16, 16, 15, 15, 14, 14, 13, 13, 12, 12, 11, 10, 10, 9, 8, 5]),
      Columna(13, [20, 20, 19, 18, 17, 16, 16, 16, 15, 15, 14, 14, 13, 13, 12, 11, 11, 9, 9, 6]),
      Columna(14, [21, 20, 20, 18, 18, 17, 17, 16, 16, 16, 15, 15, 14, 13, 13, 12, 11, 10, 10, 8]),
      Columna(15, [21, 21, 20, 19, 19, 18, 18, 17, 17, 16, 16, 15, 15, 14, 14, 13, 12, 11, 11, 9]),
      Columna(16, [21, 21, 21, 20, 19, 18, 18, 18, 17, 17, 17, 16, 16, 15, 14, 14, 13, 12, 12, 10]),
      Columna(17, [21, 21, 21, 20, 20, 19, 19, 18, 18, 18, 17, 17, 16, 16, 15, 15, 14, 13, 13, 12]),
      Columna(18, [21, 21, 21, 20, 20, 19, 19, 19, 19, 18, 18, 17, 17, 17, 16, 16, 15, 14, 14, 13]),
    ],
  );

  static Tabla gestosTardiosCDI1 = Tabla(
    [99, 95, 90, 85, 80, 75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5],
    [
      Columna(8, [21, 16, 13, 12, 9, 9, 7, 5, 4, 3, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0]),
      Columna(9, [25, 19, 15, 14, 12, 11, 9, 7, 7, 6, 5, 4, 3, 3, 2, 2, 1, 0, 0, 0]),
      Columna(10, [29, 22, 18, 17, 14, 13, 12, 10, 9, 9, 8, 7, 6, 5, 5, 4, 3, 2, 1, 1]),
      Columna(11, [32, 25, 21, 20, 17, 16, 15, 13, 12, 11, 11, 9, 8, 8, 7, 6, 5, 4, 3, 2]),
      Columna(12, [35, 28, 25, 23, 20, 19, 18, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4]),
      Columna(13, [37, 31, 28, 26, 24, 22, 20, 19, 18, 17, 16, 15, 13, 13, 11, 11, 10, 8, 7, 5]),
      Columna(14, [39, 34, 31, 29, 27, 25, 23, 21, 21, 20, 19, 17, 16, 15, 14, 13, 12, 10, 9, 6]),
      Columna(15, [41, 36, 33, 31, 30, 28, 26, 24, 23, 22, 21, 20, 19, 18, 16, 15, 14, 12, 10, 8]),
      Columna(16, [42, 37, 35, 34, 32, 30, 29, 27, 26, 25, 24, 23, 21, 20, 18, 17, 16, 14, 12, 9]),
      Columna(17, [42, 39, 37, 36, 35, 33, 32, 30, 29, 28, 26, 25, 24, 23, 21, 20, 18, 16, 14, 11]),
      Columna(18, [43, 40, 39, 37, 37, 35, 34, 32, 32, 31, 29, 28, 27, 25, 23, 22, 20, 18, 16, 12]),
    ],
  );

  static Tabla produccionPalabrasCDI2 = Tabla(
    [99, 95, 90, 85, 80, 75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5],
    [
      Columna(16, [566, 261, 181, 151, 131, 110, 89, 71, 59, 52, 43, 35, 29, 26, 22, 19, 16, 12, 10, 6]),
      Columna(17, [592, 308, 217, 181, 157, 132, 108, 88, 73, 64, 54, 45, 36, 33, 28, 24, 20, 15, 12, 7]),
      Columna(18, [613, 357, 257, 215, 185, 158, 131, 108, 90, 79, 67, 56, 46, 42, 36, 30, 25, 19, 15, 9]),
      Columna(19, [630, 404, 299, 252, 217, 187, 157, 131, 111, 97, 83, 69, 58, 52, 45, 37, 31, 23, 18, 11]),
      Columna(20, [642, 449, 343, 291, 251, 218, 186, 159, 135, 119, 102, 86, 72, 65, 56, 47, 39, 29, 22, 14]),
      Columna(21, [652, 491, 387, 332, 287, 253, 219, 189, 163, 144, 124, 106, 90, 80, 70, 58, 49, 36, 27, 17]),
      Columna(22, [659, 527, 429, 373, 324, 290, 254, 224, 195, 173, 150, 130, 112, 98, 86, 72, 61, 45, 34, 21]),
      Columna(23, [665, 558, 468, 413, 362, 327, 291, 261, 230, 205, 180, 157, 137, 120, 106, 89, 75, 55, 41, 25]),
      Columna(24, [669, 584, 504, 451, 400, 366, 300, 300, 268, 240, 214, 188, 166, 146, 129, 109, 93, 68, 50, 31]),
      Columna(25, [672, 606, 535, 486, 435, 403, 369, 340, 307, 278, 250, 223, 200, 175, 156, 132, 114, 84, 61, 38]),
      Columna(26, [674, 623, 563, 518, 469, 439, 407, 381, 348, 318, 289, 260, 236, 208, 187, 159, 138, 102, 74, 46]),
      Columna(27, [676, 636, 586, 546, 500, 473, 444, 420, 389, 358, 330, 300, 276, 244, 222, 190, 167, 123, 90, 56]),
      Columna(28, [677, 647, 605, 570, 528, 504, 478, 457, 428, 398, 371, 341, 318, 282, 259, 224, 198, 148, 108, 68]),
      Columna(29, [678, 655, 621, 590, 553, 532, 509, 491, 465, 436, 411, 382, 360, 322, 299, 261, 234, 176, 129, 82]),
      Columna(30, [679, 661, 634, 608, 575, 556, 537, 522, 499, 472, 449, 422, 402, 363, 339, 300, 271, 207, 152, 99]),
    ],
  );

  static Tabla p3lPalabrasCDI2 = Tabla(
    [99, 95, 90, 85, 80, 75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5],
    [
      Columna(16, [4, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),
      Columna(17, [5, 3, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),
      Columna(18, [5, 3, 3, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),
      Columna(19, [6, 4, 3, 3, 3, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),
      Columna(20, [7, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1]),
      Columna(21, [8, 5, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1]),
      Columna(22, [9, 5, 4, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1]),
      Columna(23, [10, 6, 5, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1]),
      Columna(24, [10, 7, 5, 5, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 1, 1, 1]),
      Columna(25, [11, 7, 6, 5, 5, 4, 4, 4, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 1, 1]),
      Columna(26, [11, 8, 7, 6, 5, 5, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 1, 1]),
      Columna(27, [12, 8, 7, 6, 6, 5, 5, 5, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 1, 1]),
      Columna(28, [12, 9, 8, 7, 6, 5, 5, 5, 5, 5, 4, 4, 4, 3, 3, 3, 2, 2, 2, 1]),
      Columna(29, [12, 10, 8, 7, 6, 6, 5, 5, 5, 5, 5, 4, 4, 4, 3, 3, 2, 2, 2, 1]),
      Columna(30, [12, 10, 9, 8, 7, 6, 6, 6, 6, 5, 5, 5, 4, 4, 4, 3, 3, 2, 2, 1]),
    ],
  );

  static Tabla complejidadFrasesCDI2 = Tabla(
    [99, 95, 90, 85, 80, 75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5],
    [
      Columna(16, [27, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
      Columna(17, [29, 4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
      Columna(18, [30, 7, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
      Columna(19, [32, 9, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
      Columna(20, [33, 13, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
      Columna(21, [34, 17, 7, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
      Columna(22, [35, 21, 11, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
      Columna(23, [35, 26, 16, 5, 4, 3, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
      Columna(24, [36, 29, 21, 11, 7, 5, 3, 2, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
      Columna(25, [36, 32, 26, 18, 13, 9, 6, 4, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0]),
      Columna(26, [37, 34, 30, 26, 20, 15, 11, 8, 6, 4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0]),
      Columna(27, [37, 35, 33, 32, 27, 22, 17, 14, 10, 7, 3, 3, 1, 1, 0, 0, 0, 0, 0, 0]),
      Columna(28, [37, 36, 35, 35, 32, 28, 25, 21, 17, 12, 6, 5, 2, 1, 1, 0, 0, 0, 0, 0]),
      Columna(29, [37, 37, 37, 37, 35, 32, 31, 28, 23, 18, 10, 8, 4, 2, 1, 1, 0, 0, 0, 0]),
      Columna(30, [37, 37, 37, 37, 37, 35, 34, 32, 29, 25, 16, 14, 7, 3, 1, 1, 0, 0, 0, 0]),
    ],
  );
}

class Tabla {
  List<int> rangoPercentiles = [];
  List<Columna> datosTabla = [];

  Columna getColumnaPorEdad(int edad) {
    final index = datosTabla.lastIndexWhere((columna) => columna.edad == edad);
    if (index != -1) {
      return datosTabla[index];
    }

    int minimo = datosTabla.first.edad;
    if (edad <= minimo) return datosTabla.first;
    //Debe ser mayor al maximo
    return datosTabla.last;
  }

  Tabla(this.rangoPercentiles, this.datosTabla);
}

class Columna {
  int edad;
  List<int> datosColumna;

  Columna(this.edad, this.datosColumna);

  ({int index, int interpolacion}) interpolar(int numPalabras) {
    if (numPalabras > datosColumna.first) {
      return (index: 0, interpolacion: 0);
    }

    int inferior = 0;
    int superior = 0;
    int index = -1;

    //Encontrar el percentil inferior
    for (var i = 0; i < datosColumna.length; i++) {
      if (datosColumna[i] < numPalabras) {
        index = i;
        inferior = datosColumna[i];
        superior = datosColumna[i - 1];
        break;
      }
    }

    if (superior == 0) superior = datosColumna.last;

    //Interpolar el percentil
    final int diferencia = superior - inferior;
    final double palabrasPorPercentil = diferencia / 5;
    double suma = inferior.toDouble();
    int interpolacion = 0;

    for (var i = 0; i < 5; i++) {
      interpolacion += 1;
      suma += palabrasPorPercentil;
      if (suma >= numPalabras) break;
    }
    return (index: index, interpolacion: interpolacion);
  }
}
